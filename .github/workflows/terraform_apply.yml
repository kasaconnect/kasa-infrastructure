name: Apply Terraform Deployment

on:
  workflow_call:
    inputs:
      tf_version:
        description: 'The version of Terraform to use'
        default: '1.6.2'
        type: string
      aws_region:
        description: 'The AWS region to use by default'
        default: 'us-east-1'
        type: string
      working_directory:
        description: 'The directory to run commands in'
        required: true
        type: string
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      event_name:
        description: 'The name of the event that called the workflow.'
        required: false
        type: string
      tfplan_s3_bucket:
        description: URI of the S3 bucket where plans are going to be saved
        required: true
        type: string

env:
  TF_PLAN_PATH: ${{ github.workspace}}/${{ inputs.working_directory }}/tfplan-${{ inputs.environment }}-${{ inputs.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
  TFPLAN_S3_PATH: ${{ inputs.tfplan_s3_bucket }}/${{ inputs.working_directory }}/tfplan-${{ inputs.environment }}-${{ inputs.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

jobs:
  terraform-apply:
    if: |
      (inputs.event_name == 'pull_request' && inputs.environment != 'production') ||
      (inputs.event_name != 'pull_request' && inputs.environment == 'production') ||
      (inputs.event_name == 'manual' && inputs.environment != 'production')
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.tf_version }}
          terraform_wrapper: false

      - name: Set AWS Role ARN
        id: set-role
        run: |
          if [ "${{ inputs.environment }}" == "dev" ]; then
            echo "ROLE_ARN=${{ secrets.AWS_ROLE_DEV }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "stage" ]; then
            echo "ROLE_ARN=${{ secrets.AWS_ROLE_STAGE }}" >> $GITHUB_ENV
          elif [ "${{ inputs.environment }}" == "prod" ]; then
            echo "ROLE_ARN=${{ secrets.AWS_ROLE_PROD }}" >> $GITHUB_ENV
          else
            echo "Unknown environment"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ inputs.aws_region }}

      - name: Configure Private Modules Credentials
        id: private-modules
        uses: philips-labs/terraform-private-modules-action@v1
        with:
          org: ${{ github.repository_owner }}
          token: ${{ secrets.TF_MODULES_REPO_TOKEN }}

      - name: Terraform Init
        id: init
        run: |
          if [ -f backend/${{ inputs.environment }}.tfbackend ]; then
            terraform init -backend-config=backend/${{ inputs.environment }}.tfbackend
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "No backend configuration found for ${{ inputs.environment }} environment. Skipping"
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi
        env:
          AWS_REGION: ${{ inputs.aws_region }}

      - name: Download Plan from S3
        if: steps.init.outputs.status != 'skipped'
        run: aws s3 cp ${{ env.TFPLAN_S3_PATH }} ${{ env.TF_PLAN_PATH }}

      - name: Terraform Apply
        if: steps.init.outputs.status != 'skipped'
        id: apply
        env:
          AWS_REGION: ${{ inputs.aws_region }}
        run: |
          terraform apply -input=false -auto-approve -no-color ${{ env.TF_PLAN_PATH }}
